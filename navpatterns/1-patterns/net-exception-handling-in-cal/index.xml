<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NET Exception Handling in CAL on BC AL Help</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/1-patterns/net-exception-handling-in-cal/</link><description>Recent content in NET Exception Handling in CAL on BC AL Help</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/1-patterns/net-exception-handling-in-cal/index.xml" rel="self" type="application/rss+xml"/><item><title>TryFunction NET Exception Handling in CAL</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/1-patterns/net-exception-handling-in-cal/tryfunction-net-exception-handling-in-cal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/1-patterns/net-exception-handling-in-cal/tryfunction-net-exception-handling-in-cal/</guid><description>Originally by Mostafa Balat, Microsoft Development Center Copenhagen
Abstract When there is a need to use .NET classes within C/AL, one of the main challenges is to handle the exceptions the methods of these .NET classes may throw. Eventually, if not handled, they will basically bubble up as runtime errors, halting the current operation a user is doing without having a chance to properly display errors in a user-friendly format.</description></item></channel></rss>