<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NAVPatterns on BC AL Help</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/</link><description>Recent content in NAVPatterns on BC AL Help</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/index.xml" rel="self" type="application/rss+xml"/><item><title>1-patterns.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/1-patterns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/1-patterns/</guid><description>Browse design patterns by tags (for &amp;ldquo;all patterns&amp;rdquo;, choose a title from the left menu).
_
_
&amp;ldquo;It&amp;rsquo;s all about the user&amp;rdquo;
User eXperience User productivity UI Data entry Setting NAV up
Setup General software development
Error handling
.NET
Metadata
Architecture
Caching A partners' world
For new NAV developers
Developer productivity
Localization</description></item><item><title>1-sensitive-data-encapsulation.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/1-sensitive-data-encapsulation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/1-sensitive-data-encapsulation/</guid><description>Sensitive Data Encapsulation By Bogdana Botez at Microsoft Development Center Copenhagen
_
_
**
**
Aliases: Encapsulation, Separation of Concerns [1]
**
**
Context: You want to store and protect sensitive data which already exists in a system, but it is not clear which data needs protection and how to store it.
Problem: Sensitive data is scattered and mixed with other data in various parts of the system (passwords residing in the same table with non-sensitive data, part of the private information might be stored in files, hardcoded text constants, hardcoded info as part of the code etc.</description></item><item><title>2-anti-patterns.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/2-anti-patterns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/2-anti-patterns/</guid><description>Some of the software development practices, had not stood the test of time. Despite that, some are still being used today by developers everywhere.
&amp;ldquo;An anti-pattern (or antipattern) is a common response to a recurring problem that is usually ineffective and risks being highly counterproductive&amp;rdquo; (from Wikipedia)
Since almost the beginning of the NAV Design Patterns project, we talked about documenting the anti-patterns - but never found the time. Until, spontaneously, the April 1st 2015 article had practically wrote itself in a couple of hours, with priceless contributions coming from Andreas, Elly, Nikola - and last but not least, waldo.</description></item><item><title>2-data-encryption.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/2-data-encryption/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/2-data-encryption/</guid><description>Encryption By Bogdana Botez at Microsoft Development Center Copenhagen
__
_
_
Context: After applying Sensitive Data Encapsulation, all sensitive data is gathered in a known place in the database. This makes it possible to apply further protection best practices.
Problem: If any non-authorized actor manages to get access to a copy of the database, the sensitive data is immediately available in clear-text.
**
**
Forces:
Accessibility: anyone who managed to steal a copy of the database can at once read the sensitive information.</description></item><item><title>3-cal-coding-guidelines.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/3-cal-coding-guidelines/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/3-cal-coding-guidelines/</guid><description>We&amp;rsquo;ve decided to publish our current C/AL coding guidelines. They are actual, as per January 2015 when this is published (but might fall out of sync as time goes by).
You can also download the C/AL coding guidelines as pdf, all in one document. In contrast, on this wiki, the coding guidelines are published individually. The reason is: give you the chance to comment and share your oppinion on each one.</description></item><item><title>3-single-point-of-access.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/3-single-point-of-access/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/3-single-point-of-access/</guid><description>Single Point of Access By Bogdana Botez at Microsoft Development Center Copenhagen
_
_
__
Context: Protected data needs to be used. There are many types of entities which might attempt to use the data.
Problem: If no standard way of accessing data exists, then each entity might attempt to build its own system for handing the sensitive data. The data access layer might be implemented over and over again by each entity, without reuse of known best practices and with a lot of code duplication.</description></item><item><title>4-get-involved.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/4-get-involved/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/4-get-involved/</guid><description>Spread the info
NAV Design Patterns are excellent materials for training and knowledge transfer. In your company, you can help new developer get to speed with NAV by recommending them to read and then present to the team one of the most common patterns: No. Series, Setup Table and definitely Hooks which will be a great investment in reducing your upgrade time. The more experienced developers can read directly the newer patterns, like Surrogate Key, Easy Update, Totals on Subpages, Using Queries instead of nested loops etc.</description></item><item><title>4-masked-text.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/4-masked-text/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/4-masked-text/</guid><description>Masked Text By Bogdana Botez at Microsoft Development Center Copenhagen
_
_
__
Aliases: Masking out
Context: In the user interface (UI) of a software system, the user enters protected information such as a password, an access key, a credit card number etc.
Problem: The entered information is visible during data entry and whenever any user (the one who entered the data, or a foreign user) opens the UI.
Forces:</description></item><item><title>5-ssl-in-nav.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/5-ssl-in-nav/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/5-ssl-in-nav/</guid><description>SSL in NAV By Bogdana Botez at Microsoft Development Center Copenhagen
_
_
__
Context: The security of data transmission is just as important as the security of data storage. When data is transmitted over the web, Secure Sockets Layer (SSL) is available to be used with the web client in Dynamics NAV. Microsoft&amp;rsquo;s NAV cloud solution has SSL enabled by default. However, if a partner company chooses to deploy their own NAV, then they need to handle SSL explicitly.</description></item><item><title>actions-images.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/actions-images/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/actions-images/</guid><description>All actions must have an image assigned to them. Bad code
{ 7 ;1 ;Action ; CaptionML=ENU=Customer - &amp;amp;Balance; RunObject=Report 121 } Good code
{ 7 ;1 ;Action ; CaptionML=ENU=Customer - &amp;amp;Balance; RunObject=Report 121 } Image=Report }</description></item><item><title>activity-log.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/activity-log/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/activity-log/</guid><description>by Ciprian Iordache at Microsoft Development Center Copenhagen Activity Log Abstract
The Activity Log pattern tracks execution of activities. This is a Dynamics NAV specific implementation of the Audit Log pattern.
Problem
In general, integrating with external systems can be very challenging, due to the complexity of the situation &amp;ndash; connectivity issues, asynchronous operations, user errors, etc. These challenges require sometimes re-trying several times, polling the external system, re-send/re-get data as all these activities can succeed but can very well fail.</description></item><item><title>argument-table.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/argument-table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/argument-table/</guid><description>Argument table pattern By Nikola Kukrika and Waldo
Abstract The Argument Table pattern is used to provide an extension point for adding new arguments without changing the signature. By grouping multiple arguments into a table the code becomes more readable (function signature and the usage of the function).
Problem In CAL overloading function signature is not supported. It is also not possible to provide default values for the function arguments.</description></item><item><title>begin-as-an-afterword.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/begin-as-an-afterword/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/begin-as-an-afterword/</guid><description>When BEGIN follows THEN, ELSE, DO, it should be on the same line, preceded by one space character. Bad code
IF ICPartnerRefType = ICPartnerRefType::&amp;quot;Common Item No.&amp;quot; THEN BEGIN ... END; Good code
IF ICPartnerRefType = ICPartnerRefType::&amp;quot;Common Item No.&amp;quot; THEN BEGIN ... END;</description></item><item><title>begin-end.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/begin-end/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/begin-end/</guid><description>Only use BEGIN..END to enclose compound statements. Bad code
IF FINDSET THEN BEGIN REPEAT ... UNTIL NEXT = 0; END; Good code
IF FINDSET THEN REPEAT ... UNTIL NEXT = 0; Bad code
IF IsAssemblyOutputLine THEN BEGIN TESTFIELD(&amp;quot;Order Line No.&amp;quot;,0); END; Good code
IF IsAssemblyOutputLine THEN TESTFIELD(&amp;quot;Order Line No.&amp;quot;,0); Bad code
IF FINDSET THEN REPEAT BEGIN ... END; UNTIL NEXT = 0; Good code
IF FINDSET THEN REPEAT .</description></item><item><title>binary-operator-line-start.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/binary-operator-line-start/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/binary-operator-line-start/</guid><description>Do not start a line with a binary operator. Bad code
&amp;quot;Quantity to Ship&amp;quot; := Quantity - &amp;quot;Quantity Shipped&amp;quot; Good code
&amp;quot;Quantity to Ship&amp;quot; := Quantity - &amp;quot;Quantity Shipped&amp;quot;</description></item><item><title>blank-lines.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/blank-lines/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/blank-lines/</guid><description>Do not use blank lines at the beginning or end of any functions, after BEGIN, before END, or inside multiline expressions. Bad code
PROCEDURE MATRIX\_OnDrillDown@1133(MATRIX\_ColumnOrdinal : Integer); BEGIN SetupDrillDownCol(MATRIX\_ColumnOrdinal); DrillDown(FALSE,ValueType); END; Good code
PROCEDURE MATRIX\_OnDrillDown@1133(MATRIX\_ColumnOrdinal : Integer); BEGIN SetupDrillDownCol(MATRIX\_ColumnOrdinal); DrillDown(FALSE,ValueType); END; Bad code
IF NameIsValid AND Name2IsValid THEN Good code
IF NameIsValid AND Name2IsValid THEN</description></item><item><title>blocked-entity.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/blocked-entity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/blocked-entity/</guid><description>by Abhishek Ghosh at Microsoft Development Center Copenhagen
Abstract The Blocked Entity is used when it is required to stop transactions for an entity (mostly master data), temporarily or permanently.
Description To block entities through metadata, read this pattern. To do the same thing through data, read Data Driven Blocked Entity pattern.
The business entity holds a state that controls if a given transaction is allowed. The state is used by the logic controlling transactions.</description></item><item><title>by-reference-parameters.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/by-reference-parameters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/by-reference-parameters/</guid><description>Do not declare parameters by reference if their values are not intended to be changed.
Unintentional value changes might propagate. Also, it might lead people to believe that value changes are intended.
Bad code
LOCAL PROCEDURE ShowMessage@15(VAR Text@1000 : Text\[250\]); BEGIN Text := GetMessageText; IF (Text &amp;lt;\&amp;gt; '') AND GenJnlLineInserted THEN MESSAGE(Text); END; Good code
LOCAL PROCEDURE ShowMessage@15(Text@1000 : Text\[250\]); BEGIN Text := GetMessageText; IF (Text &amp;lt;\&amp;gt; '') AND GenJnlLineInserted THEN MESSAGE(Text); END;</description></item><item><title>cached-web-service-calls.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/cached-web-service-calls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/cached-web-service-calls/</guid><description>by Mostafa Balat, Microsoft Development Center Copenhagen
Abstract In a service-oriented deployment, web services are used to extend NAV&amp;rsquo;s functionality and reach. Depending on how volatile this data is and the corresponding usage scheme, it is expected to be up-to-date within a pre-defined period of time (e.g. once a day).
Description When NAV is integrated with external services, then the user scenarios become dependent on the data and functions offered by such services.</description></item><item><title>captionml-for-system-tables.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/captionml-for-system-tables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/captionml-for-system-tables/</guid><description>CaptionML should always be specified on a page field for a system table. By default, system tables do not have captions, so if you need to use them in the UI then captions need to be added.
Bad code
... { 2 ;2 ;Field ; SourceExpr=Name } ... OBJECT Table 2000000000 User ... { 2 ; ;Name ;Text50 } Good code
... { 2 ;2 ;Field ; CaptionML=ENU=Name; SourceExpr=Name } .</description></item><item><title>case-actions.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/case-actions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/case-actions/</guid><description>A CASE action should start on a line after the possibility. Bad code
CASE Letter OF 'A': Letter2 := '10'; 'B': Letter2 := '11'; Good code
CASE Letter OF 'A': Letter2 := '10'; 'B': Letter2 := '11';</description></item><item><title>class-coupling.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/class-coupling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/class-coupling/</guid><description>Do not write functions that have high class coupling. This makes the code hard to maintain.
Bad code
Any procedure / trigger that has class coupling of \&amp;gt; 30 Good code
Any procedure / trigger that has class coupling of &amp;lt;= 30\. Class coupling is computed by summing the unique instances of the following in a code block: - every unique usage of a complex C/AL data type (table, codeunit, etc) as 1\.</description></item><item><title>code-of-conduct.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/code-of-conduct/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/code-of-conduct/</guid><description>Find below the rules to be used when disseminating or relating to the NAV Design Patterns.
Only use materials published in text on the NAV Design Patterns Wiki site. If you received from us, any unpublished materials, please observe that they are subject to change and have not been approved for external use. When referencing a NAV Design Pattern, you must remember to also reference its author and company where the author is employed.</description></item><item><title>colon-usage-in-case.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/colon-usage-in-case/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/colon-usage-in-case/</guid><description>The last possibility on a CASE statement must be immediately followed by a colon. Bad code
CASE DimOption OF DimOption::&amp;quot;Global Dimension 1&amp;quot; : DimValue.&amp;quot;Dimension Code&amp;quot; := GLSetup.&amp;quot;Global Dimension 1 Code&amp;quot;; Good code
CASE DimOption OF DimOption::&amp;quot;Global Dimension 1&amp;quot;: DimValue.&amp;quot;Dimension Code&amp;quot; := GLSetup.&amp;quot;Global Dimension 1 Code&amp;quot;;</description></item><item><title>comments-curly-brackets.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/comments-curly-brackets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/comments-curly-brackets/</guid><description>Never use curly bracket comments. During development, the &amp;ldquo;Block comment&amp;rdquo; functionality can be used instead. However, in production code, block comments are not recommended. Bad code
PeriodTxt: {Period} Good code
PeriodTxt: // Period Bad code
PROCEDURE MATRIX\_OnAfterGetRecord@10(MATRIX\_ColumnOrdinal : Integer); BEGIN { IF ShowColumnName THEN MatrixHeader := MatrixRecords\[MATRIX\_ColumnOrdinal\].Name ELSE MatrixHeader := MatrixRecords\[MATRIX\_ColumnOrdinal\].Code; } MatrixRecord := MatrixRecords\[MATRIX\_ColumnOrdinal\]; AnalysisValue := CalcAmt(ValueType,TRUE); MATRIX\_CellData\[MATRIX\_ColumnOrdinal\] := AnalysisValue; END; Good code
PROCEDURE MATRIX\_OnAfterGetRecord@10(MATRIX\_ColumnOrdinal : Integer); BEGIN MatrixRecord := MatrixRecords\[MATRIX\_ColumnOrdinal\]; AnalysisValue := CalcAmt(ValueType,TRUE); MATRIX\_CellData\[MATRIX\_ColumnOrdinal\] := AnalysisValue; END;</description></item><item><title>comments-spacing.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/comments-spacing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/comments-spacing/</guid><description>Always start comments with // followed by one space character. Bad code
RowNo += 1000; //Move way below the budget Good code
RowNo += 1000; // Move way below the budget</description></item><item><title>conditional-cascading-update.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/conditional-cascading-update/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/conditional-cascading-update/</guid><description>_by Jan Hoek at IDYN _
Abstract The Conditional Cascading Update pattern is used to intelligently populate fields whose values depend on other field values. In this pattern description, the field triggering the update will be called &amp;ldquo;source field&amp;rdquo;, and the depending field will be called &amp;ldquo;target field&amp;rdquo;.
**Description **
The value of one table field sometimes depends on the value of another field, typically following an application-defined transformation (note that we&amp;rsquo;re talking about transformations of field values here.</description></item><item><title>confirm.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/confirm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/confirm/</guid><description>Always end CONFIRM with a question mark. Bad code
ChangeAllOpenedEntriesQst@1000 : TextConst 'ENU=Do you want to change all open entries for every customer and vendor that are not blocked'; ... IF CONFIRM(ChangeAllOpenedEntriesQst,TRUE) THEN Good code
ChangeAllOpenedEntriesQst@1000 : TextConst 'ENU=Do you want to change all open entries for every customer and vendor that are not blocked?'; ... IF CONFIRM(ChangeAllOpenedEntriesQst,TRUE) THEN</description></item><item><title>copy-document.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/copy-document/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/copy-document/</guid><description>By Bogdan Sturzoiu at Microsoft Development Center Copenhagen
Abstract The goal of the Copy Document pattern is to create a replica of an existing open or closed document (posted or not posted), by moving the lines and, optionally, the header information from the source document to a destination document.
Description Documents are widely used by most of our customers. Many times, a significant portion of these documents are similar to each other, either by sharing the same customer, vendor, type, or line structure.</description></item><item><title>create-data-from-templates.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/create-data-from-templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/create-data-from-templates/</guid><description>by Nikola Kukrika at Microsoft Development Center Copenhagen
Abstract For many records, such as Items, Customers, and Vendors, users have to enter the same sets of data again and again. This is tedious, error-prone (users forget to enter a field or they choose the wrong group), and difficult to learn for some users.
We can group sets of data as templates to speed up and simplify the process of entering data in Microsoft Dynamics NAV.</description></item><item><title>create-urls-to-nav-clients.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/create-urls-to-nav-clients/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/create-urls-to-nav-clients/</guid><description>By Mike Borg Cardona and Bogdana Botez at Microsoft Development Center Copenhagen
Abstract This article illustrates NAV platform functionality to be used by C/AL developers.
The URL builder function, GETURL, is released in Microsoft Dynamics NAV 2013 R2 to reduce coding time for developers who need to create various URL strings to run application objects in either the win client, the web client, or on web services. In addition, the GETURL function makes multitenancy features more transparent to C/AL developers.</description></item><item><title>creating-custom-charts.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/creating-custom-charts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/creating-custom-charts/</guid><description>by Nikola Kukrika at Microsoft Development Center Copenhagen
Abstract The goal of this solution is to enable you to:
Use charts in the web client. Create charts with custom functionality. Description This pattern enables you to implement a business chart (Specific Chart type) in a way that is maintainable and reusable on other pages. This also enables you to provide specific functionality that is not possible with the Generic Chart type and it enables you to show charts in the web client.</description></item><item><title>cross-session-events.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/cross-session-events/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/cross-session-events/</guid><description>By Nikolai L&amp;rsquo;Estrange, from TVision Technology Ltd. in the UK_ _
Abstract Track things that happen in other NAV Sessions.
Problem In Microsoft Dynamics NAV you can fire a function whenever something changes within your session (and from NAV 2016 this is even easier with the new Event model), however there is not an easy way to know what is happening in other sessions. Sometimes you would like to know what has happened since your last read, without reading everything again, e.</description></item><item><title>cue-table.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/cue-table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/cue-table/</guid><description>Cue Table _By Bogdana Botez at Microsoft Development Center Copenhagen
_
_
_
Cues are the second usual application of the Singleton Table pattern in Dynamics NAV, after Setup Tables.
Context: The user gets overview information about the business on the Dynamics NAV Role Center page.
Figure 1 - Cue information in Dynamics NAV shows cue information seen by the user on the Sales Order Processor role center.
The overview information consists of summed-up numbers, calculated from business data, like for example how many sales orders are still open, how many shipments are ready to go, or partially shipped, how many documents are waiting for approval etc.</description></item><item><title>currently-active-record.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/currently-active-record/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/currently-active-record/</guid><description>Authors: Henrik Langbak and Kim Ginnerup, Bording Data
Abstract Date controlled data is expensive to find in the database. This pattern describes how using a view with a sub-select and a linked table object will minimize the returned dataset.
A side effect is reduced and simplified code, increased performance and a more scalable solution that is almost independent of the amount of records in the table.
Description There is no way in NAV to get a set of records from the database, which all have the newest starting date, that is less than or equal to today&amp;rsquo;s date.</description></item><item><title>cyclomatic-complexity.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/cyclomatic-complexity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/cyclomatic-complexity/</guid><description>Do not write functions that have high cyclomatic complexity. This makes the code hard to maintain.
Bad code
Any procedure / trigger that has a cyclomatic complexity \&amp;gt; 25, using the CC3 version mentioned in [this article][anchor0]. Good code
Any procedure / trigger that has a cyclomatic complexity &amp;lt;= 25, using the CC3 version. The CC3 version is computed by summing the following in a code block: - each IF statement as 1\.</description></item><item><title>data-driven-blocked-entity.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/data-driven-blocked-entity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/data-driven-blocked-entity/</guid><description>Written by Bogdan Andrei Sturzoiu, at Microsoft Development Center Copenhagen
****Abstract
This pattern implements a generic mechanism for dynamically restricting and allowing usage of a record by the business process administrator.
Problem
A NAV record can be used in a number of functionalities across the app. There are situations, however, when the administrator wants to restrict the consumption of such a record, as well as lift the restriction when it is no longer relevant.</description></item><item><title>data-migration-facade.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/data-migration-facade/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/data-migration-facade/</guid><description>Data Migration Façade By David Bastide and Soumya Dutta at Microsoft Development Center Copenhagen
Context: This pattern is describing how you can migrate data using the Data Migration Façade.
Problem: Writing migration code from an external source, such as a product from a competitor, can be time consuming, as you need to tackle the problems of what to migrate, in which order, exception handling&amp;hellip; and can result in code that is fragile due to deep dependencies on the NAV data model (high coupling).</description></item><item><title>design.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/design/</guid><description>C/AL Coding Guidelines Design Find the C/AL guidelines by expanding the menu in the left.</description></item><item><title>discovery-event.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/discovery-event/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/discovery-event/</guid><description>by waldo
Abstract The &amp;ldquo;Discovery Event&amp;rdquo; pattern is a way for a generic functionality, to call out to other functionalities that want to make use of it, by raising an event, so that they have an event to subscribe to. This is usually done to set itself up within the generic app.
The problem Let&amp;rsquo;s suppose you have a generic piece of functionality, that hooks into lots of places (modules) in your application.</description></item><item><title>document.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/document/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/document/</guid><description>By Xavier Garonnat, knk Ingénierie (France), xgaronnat@knk.fr
Abstract A document structure contains a header and a set of lines. Each line is linked to the header and could have common data with header.
Description This pattern should be used as a basis to build any document, showing a header and multiple lines in the same page. Basically, a document is at least composed of two tables and three pages, as shown below:</description></item><item><title>easy-update-of-setup-or-supplementary-information.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/easy-update-of-setup-or-supplementary-information/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/easy-update-of-setup-or-supplementary-information/</guid><description>by Anders Larsen at Microsoft Development Center Copenhagen
Abstract Users or the administrator must regularly update setup or supplementary information in the day-to-day business, such as setting up a new type of customer. This setup task often arrives when their focus is on registration and execution instead of setup.
The navigation experience around these extra steps is often quite troublesome and time-consuming. To enable users to easily perform the needed update, a guide often gives the best support.</description></item><item><title>encapsulate-local-functionality.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/encapsulate-local-functionality/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/encapsulate-local-functionality/</guid><description>Any function used local must be defined as local.</description></item><item><title>end-else-pair.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/end-else-pair/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/end-else-pair/</guid><description>The END ELSE pair should always appear on the same line. Bad code
IF OppEntry.FIND('-') THEN IF SalesCycleStage.FIND('-') THEN BEGIN ... END ELSE ... Good code
IF OppEntry.FIND('-') THEN IF SalesCycleStage.FIND('-') THEN BEGIN ... END ELSE ...</description></item><item><title>error-message-processing.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/error-message-processing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/error-message-processing/</guid><description>By Jesper Schulz at Microsoft Development Center Copenhagen
Note: This pattern describes new functionality which makes it possible to generalize the Journal Error Processing pattern.
Abstract Missing, invalid or incomplete data is a common issue during data processing in NAV. This article describes how to collect all error messages during processing using the error message component and present them to the user in a unified way, which enables the user to correct the errors efficiently.</description></item><item><title>extending-the-role-center-headlines.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/extending-the-role-center-headlines/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/extending-the-role-center-headlines/</guid><description>By David Bastide at Microsoft Development Center Copenhagen
__
__
Context Headlines are designed as a page of type HeadlinePart containing at least one text field. The part is added to the top of Role Center pages.
This document provides an elegant and extensible pattern about how to extend the Role Center headlines to add your own business headlines based on your data, and display them only if relevant.
Description The Dynamics 365 Business Central release (April 2018) introduces a new HeadlinePart page type.</description></item><item><title>feature-localization-for-data-structures.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/feature-localization-for-data-structures/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/feature-localization-for-data-structures/</guid><description>by Bogdan Sturzoiu at Microsoft Development Center Copenhagen
Abstract This pattern shows a solution for integrating W1 features to pre-existing country features that use different tables to achieve similar functionality.
Description It sometimes happens that certain features are requested in a NAV-supported country, but they are not initially considered generic enough to be included in the W1 build. This is how local features, such as Subcontracting in Italy and India, were created or specific banking and payments functionality in Italy, France, Spain, and others.</description></item><item><title>fieldcaption-and-tablecaption.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/fieldcaption-and-tablecaption/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/fieldcaption-and-tablecaption/</guid><description>For user messages, errors etc., use FIELDCAPTION not FIELDNAME and TABLECAPTION not TABLENAME.
Reason:
The correct translation will be automatically used. If the caption/name changes, then there will be a single point of change needed. Bad code
IF NOT CONFIRM(UpdateLocationQst,TRUE,FIELDNAME(&amp;quot;Location Code&amp;quot;),...) Good code
IF NOT CONFIRM(UpdateLocationQst,TRUE,FIELDCAPTION(&amp;quot;Location Code&amp;quot;),...)</description></item><item><title>fielderror.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/fielderror/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/fielderror/</guid><description>Never use FIELDERROR with a period as it is automatically inserted. Bad code
InvalidValue@1025 : TextConst 'ENU=is invalid.'; ... Cust.FIELDERROR(&amp;quot;No.&amp;quot;,InvalidValue); Good code
InvalidValue@1025 : TextConst 'ENU=is invalid'; ... Cust.FIELDERROR(&amp;quot;No.&amp;quot;,InvalidValue);</description></item><item><title>findset-findfirst-findlast.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/findset-findfirst-findlast/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/findset-findfirst-findlast/</guid><description>FINDSET, FIND('+') or FIND('-') should only be used when NEXT is used and vice versa.
Bad code
IF Cust.FIND('-') THEN ERROR(CustIsBlockErr) Good code
IF Cust.FINDFIRST THEN ERROR(CustIsBlockErr) Bad code
IF Cust.FINDFIRST THEN REPEAT ... UNTIL Cust.NEXT = 0; Good code
IF Cust.FINDSET THEN REPEAT ... UNTIL Cust.NEXT = 0;</description></item><item><title>global-text-constants.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/global-text-constants/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/global-text-constants/</guid><description>Declare Text Constant as global variables.
Bad code
PROCEDURE GetRequirementText@6(...) : Text\[50\]; VAR RequirementOptionsTxt@1002 : TextConst 'ENU=Shipment,Receive,Pick,Put-Away'; BEGIN Good code
VAR RequirementOptionsTxt@1002 : TextConst 'ENU=Shipment,Receive,Pick,Put-Away'; ... PROCEDURE GetRequirementText@6(...) : Text\[50\]; BEGIN</description></item><item><title>hooks.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/hooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/hooks/</guid><description>By Eric Wauters (waldo), Partner-Ready-Software
Abstract As a partner, adding new code to NAV means interfering with code shipped by Microsoft. Minimize your footprint of changes in Microsoft code, so that, when a new NAV version is shipped, you avoid conflicts and upgrade impact. The core NAV code is the &amp;ldquo;danger zone&amp;rdquo; - the less you touch it, the happier your upgrade will be.
Description
When doing development over years, by different developers with different mindsets, the standard codebase gets changed a lot, adding multiple lines of code, adding local and global variants, adding or changing keys, changing existing business logic, &amp;hellip; .</description></item><item><title>implementation-of-surrogate-keys-using-autoincrement-pattern.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/implementation-of-surrogate-keys-using-autoincrement-pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/implementation-of-surrogate-keys-using-autoincrement-pattern/</guid><description>By Soren Klemmensen, Partner-Ready-Software &amp;amp; 360 Visibility
Abstract This Pattern is meant to create generic &amp;amp; reusable links between tables. The goal is to have an easy generic way to link a generically designed sub table to a record on a main table which can be used for other links too.
To minimize the impact of customizations and to keep modules as generic and reusable as possible the idea of the Implementation of surrogate keys using AutoIncrement pattern is:</description></item><item><title>in-context-notifications.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/in-context-notifications/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/in-context-notifications/</guid><description>__By Soumya Dutta at Microsoft Development Center Copenhagen
Context Application developers need to raise a notification on events that are not blocking but do require attention from users. Notifications alert users to issues or information, and let them decide whether to react immediately or finish what they&amp;rsquo;re doing first.
Problem Application developers have started to use system calls like CONFIRM or MESSAGE to alert or inform users about a condition. These calls interrupt users by displaying a window in the middle of the screen and forcing an immediate response.</description></item><item><title>indentation.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/indentation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/indentation/</guid><description>In general, use an indentation of two space characters. Logical expressions in the IF, WHILE, and UNTIL parts are indented at least 3, 6, and 6 spaces respectively. Bad code
IF GLSetup.&amp;quot;Unrealized VAT&amp;quot; OR (GLSetup.&amp;quot;Prepayment Unrealized VAT&amp;quot; AND NewCVLedgEntryBuf.Prepayment) Good code
IF GLSetup.&amp;quot;Unrealized VAT&amp;quot; OR (GLSetup.&amp;quot;Prepayment Unrealized VAT&amp;quot; AND NewCVLedgEntryBuf.Prepayment) Bad code
IF GenJnlLine.&amp;quot;Account No.&amp;quot; &amp;lt;\&amp;gt; ICPartner.Code THEN ICPartner.GET(&amp;quot;Account No.&amp;quot;); IF GenJnlLine.Amount \&amp;gt; 0 THEN BEGIN ... Good code</description></item><item><title>initialized-variables.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/initialized-variables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/initialized-variables/</guid><description>Variables should always be set to a specific value, before they are used.
Bad code
PROCEDURE SetPurchLine@22(VAR CurrentPurchLine@1000 : Record 39); VAR Pegging@1001 : Boolean; BEGIN IF Pegging THEN CurrQuantity := CurrentPurchLine.&amp;quot;Quantity (Base)&amp;quot; ELSE CurrQuantity := CurrentPurchLine.&amp;quot;Outstanding Qty. (Base)&amp;quot;; END; Good code
PROCEDURE SetPurchLine@22(VAR CurrentPurchLine@1000 : Record 39); VAR Pegging@1001 : Boolean; BEGIN Pegging := IsPegging(CurrentPurchLine); IF Pegging THEN CurrQuantity := CurrentPurchLine.&amp;quot;Quantity (Base)&amp;quot; ELSE CurrQuantity := CurrentPurchLine.&amp;quot;Outstanding Qty. (Base)&amp;quot;; END; Bad code</description></item><item><title>instructions-in-the-ui.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/instructions-in-the-ui/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/instructions-in-the-ui/</guid><description>by Nikola Kukrika at Microsoft Development Center Copenhagen
Abstract To mitigate usability problems with learnability or discoverability of NAV functionality, it is possible to embed instructions in the UI in connection with the task that the user is performing. The goal is to explain how to use the product or feature without impairing the user&amp;rsquo;s productivity after user has learned how to use a feature.
Description Users must often go through a few days of training to learn how to use NAV, and even then, many users rely on super users to help them mitigate difficulties using NAV.</description></item><item><title>integration-of-addresses.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/integration-of-addresses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/integration-of-addresses/</guid><description>watch?v=60Wrx9N gfY&amp;amp;list=PLhZ3P LY7CqmVszuvtJLujFyHpsVN0Uw&amp;amp;index=19</description></item><item><title>internally-used-dot-net-types.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/internally-used-dot-net-types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/internally-used-dot-net-types/</guid><description>Internally used Dot Net Types (Dynamics NAV 2015)
Dot Net Types
&amp;lsquo;mscorlib&amp;rsquo;.System.Convert
&amp;lsquo;mscorlib&amp;rsquo;.System.Globalization.CultureInfo
&amp;lsquo;mscorlib&amp;rsquo;.System.Globalization.DateTimeStyles
&amp;lsquo;mscorlib&amp;rsquo;.System.Globalization.NumberStyles
&amp;lsquo;mscorlib&amp;rsquo;.System.Type
&amp;lsquo;mscorlib&amp;rsquo;.System.Array
&amp;lsquo;mscorlib&amp;rsquo;.System.EventArgs
&amp;lsquo;mscorlib&amp;rsquo;.System.Security.Cryptography.SHA512Managed
&amp;lsquo;mscorlib&amp;rsquo;.System.Security.Cryptography.HashAlgorithm
&amp;lsquo;mscorlib&amp;rsquo;.System.Text.Encoding
&amp;lsquo;mscorlib&amp;rsquo;.System.Text.UTF8Encoding
&amp;lsquo;mscorlib&amp;rsquo;.System.Environment
&amp;lsquo;mscorlib&amp;rsquo;.System.IO.Directory
&amp;lsquo;mscorlib&amp;rsquo;.System.IO.Path
&amp;lsquo;mscorlib&amp;rsquo;.System.IO.File
&amp;lsquo;mscorlib&amp;rsquo;.System.IO.FileAttributes
&amp;lsquo;mscorlib&amp;rsquo;.System.Collections.ArrayList
&amp;lsquo;mscorlib&amp;rsquo;.System.Collections.IEnumerator
&amp;lsquo;mscorlib&amp;rsquo;.System.Collections.Generic.IEnumerator`1
&amp;lsquo;mscorlib&amp;rsquo;.System.TimeSpan
&amp;lsquo;mscorlib&amp;rsquo;.System.DateTime
&amp;lsquo;mscorlib&amp;rsquo;.System.DateTimeKind
&amp;lsquo;mscorlib&amp;rsquo;.System.DateTimeOffset
&amp;lsquo;mscorlib&amp;rsquo;.System.Decimal
&amp;lsquo;mscorlib&amp;rsquo;.System.String
&amp;lsquo;System&amp;rsquo;.System.Diagnostics.Process
&amp;lsquo;System&amp;rsquo;.System.Diagnostics.ProcessStartInfo
&amp;lsquo;System&amp;rsquo;.System.IO.Compression.CompressionMode
&amp;lsquo;System&amp;rsquo;.System.IO.Compression.GZipStream
&amp;lsquo;System&amp;rsquo;.System.Uri
&amp;lsquo;System&amp;rsquo;.System.UriPartial
&amp;lsquo;System.Data&amp;rsquo;.System.Data.DataColumn
&amp;lsquo;System.Data&amp;rsquo;.System.Data.DataTable
&amp;lsquo;System.Data&amp;rsquo;.System.Data.DataRow
&amp;lsquo;System.Web&amp;rsquo;.System.Web.HttpUtility
&amp;lsquo;System.Windows.Forms&amp;rsquo;.System.Windows.Forms.DialogResult
&amp;lsquo;System.Windows.Forms&amp;rsquo;.System.Windows.Forms.FileDialog
&amp;lsquo;System.Windows.Forms&amp;rsquo;.System.Windows.Forms.OpenFileDialog
&amp;lsquo;System.Windows.Forms&amp;rsquo;.System.Windows.Forms.SaveFileDialog
&amp;lsquo;System.Windows.Forms&amp;rsquo;.System.Windows.Forms.FolderBrowserDialog
&amp;lsquo;System.Xml&amp;rsquo;.*
&amp;lsquo;DocumentFormat.OpenXml&amp;rsquo;.*
&amp;lsquo;mscorlib&amp;rsquo;.System.IO.DirectoryInfo
&amp;lsquo;mscorlib&amp;rsquo;.System.IO.FileInfo
&amp;lsquo;Microsoft.Dynamics.Nav.Client.CodeViewerTypes&amp;rsquo;.Microsoft.Dynamics.Nav.Client.CodeViewerTypes.BreakpointCollection
&amp;lsquo;Microsoft.Dynamics.Nav.Client.CodeViewerTypes&amp;rsquo;.Microsoft.Dynamics.Nav.Client.CodeViewerTypes.VariableCollection
&amp;lsquo;Microsoft.Dynamics.Nav.SMTP&amp;rsquo;.Microsoft.Dynamics.Nav.SMTP.SmtpMessage
&amp;lsquo;Microsoft.Dynamics.Nav.Management.DSObjectPickerWrapper&amp;rsquo;.*
&amp;lsquo;Microsoft.Dynamics.Nav.Timer&amp;rsquo;.*
&amp;lsquo;Microsoft.Dynamics.Nav.DO.ClientProxyWrapper&amp;rsquo;.*
&amp;lsquo;Microsoft.Dynamics.Nav.Client.BusinessChart&amp;rsquo;.*
&amp;lsquo;Microsoft.Dynamics.Nav.Client.BusinessChart.Model&amp;rsquo;.*
&amp;lsquo;Microsoft.Dynamics.Nav.Integration.Office&amp;rsquo;.*
&amp;lsquo;Microsoft.Dynamics.Nav.Integration.Office.Mock&amp;rsquo;.*
&amp;lsquo;Microsoft.Dynamics.Nav.EwsWrapper&amp;rsquo;.*
&amp;lsquo;Microsoft.Dynamics.Nav.EwsWrapper.ALTestHelper&amp;rsquo;.*
&amp;lsquo;Microsoft.Dynamics.NAV.OLSync.OLSyncSupplier&amp;rsquo;.*
&amp;lsquo;Microsoft.Dynamics.Nav.OLSync.Common&amp;rsquo;.*
&amp;lsquo;Microsoft.Dynamics.Nav.NavUserAccount&amp;rsquo;.*</description></item><item><title>internationalization.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/internationalization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/internationalization/</guid><description>C/AL Coding Guidelines Internationalization Find the C/AL guidelines by expanding the menu in the left.</description></item><item><title>journal-error-processing.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/journal-error-processing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/journal-error-processing/</guid><description>by Bogdana Botez at Microsoft Development Center Copenhagen
Abstract This pattern describes an optimized way to handle invalid, incomplete, or inconsistent data that users enter in journals.
Description Scenario: A user has entered data on a journal line and proceeds to invoke a processing action on it, such as posting or exporting to electronic payments. NAV validates the data before it is committed. If any validation errors are found, the user must be informed of validation errors in the most optimal way.</description></item><item><title>journal-template-batch-line.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/journal-template-batch-line/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/journal-template-batch-line/</guid><description>by Bogdana Botez at Microsoft Development Center Copenhagen
Abstract The role of a journal line is to temporarily hold transaction data until the transaction is posted. Before posting, the entries are in a draft state, which means that they are available for corrections and/or deletion. As soon as the entries are posted, they are converted to ledger entries.
Journal templates are used to specify the underlying journal structure and to provide the default information for the journal batches.</description></item><item><title>keyword-pairs-indentation.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/keyword-pairs-indentation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/keyword-pairs-indentation/</guid><description>The IF..THEN pair, WHILE..DO pair, and FOR..DO pair must appear on the same line or the same level of indentation. Bad code
IF (x = y) AND (a = b) THEN Good code
IF (x = y) AND (a = b) THEN</description></item><item><title>line-start-keywords.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/line-start-keywords/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/line-start-keywords/</guid><description>The END, IF, REPEAT, FOR, WHILE, ELSE and CASE statement should always start a line. Bad code
IF IsContactName THEN ValidateContactName ELSE IF IsSalespersonCode THEN ValidateSalespersonCode ELSE IF IsSalesCycleCode THEN ValidatSalesCycleCode; Good code
IF IsContactName THEN ValidateContactName ELSE IF IsSalespersonCode THEN ValidateSalespersonCode ELSE IF IsSalesCycleCode THEN ValidatSalesCycleCode;</description></item><item><title>localizability.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/localizability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/localizability/</guid><description>C/AL Coding Guidelines Localizability Find the C/AL guidelines by expanding the menu in the left.</description></item><item><title>lonely-repeat.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/lonely-repeat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/lonely-repeat/</guid><description>The REPEAT statement should always be alone on a line. Bad code
IF ReservEntry.FINDSET THEN REPEAT Good code
IF ReservEntry.FINDSET THEN REPEAT</description></item><item><title>maintainability-index.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/maintainability-index/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/maintainability-index/</guid><description>Maintainability Index: Do not write functions that have a very low maintainability index. This makes the code hard to maintain.
Bad code
Any procedure / trigger that has a maintainability index &amp;lt; 20 Good code
Any procedure / trigger that has a maintainability index \&amp;gt;= 20\. The Maintainability Index is computed as a function: - Lines Of Code (inverse proportional) - the Halstead Volume - Cyclomatic Complexity (inverse proportional). More info</description></item><item><title>master-data.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/master-data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/master-data/</guid><description>By Soren Klemmensen, Partner-Ready-Software &amp;amp; 360 Visibility
Abstract The goal of this design pattern is to outline a standard way of creating master data, such as customers, vendors or items, in NAV.
Description This pattern creates a standard master data entity, listing all necessary prerequisites, attributes and methods to generate a basic version of the data entity.
It is being used for creating a master data entity and can roughly be divided into 2 categories: Business and Product</description></item><item><title>message-and-error.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/message-and-error/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/message-and-error/</guid><description>Always end MESSAGE or ERROR with a period. Bad code
CustIsBlockedErr@1025 : TextConst 'ENU=You cannot %1 this type of document when Customer %2 is blocked with type %3'; ... ERROR(CustIsBlockedErr,...); Good code
CustIsBlockedErr@1025 : TextConst 'ENU=You cannot %1 this type of document when Customer %2 is blocked with type %3.'; ... ERROR(CustIsBlockedErr,...);</description></item><item><title>multi-file-download.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/multi-file-download/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/multi-file-download/</guid><description>By Martin Dam at Microsoft Development Center Copenhagen Abstract The goal of this pattern is to enable the users to download multiple files as a zip file instead of downloading one by one. On the Web Client this is preferred way of delivering multiple files since it is one of the web patterns and we cannot use File Management code unit to place files silently on the machine.
Description When generating reports that consists of multiple, and usually an unknown number of files, the developer will have to handle the download which also depends on the client the user is on.</description></item><item><title>multi-page-list.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/multi-page-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/multi-page-list/</guid><description>By Bogdana Botez at Microsoft Development Center Copenhagen
__
Abstract This pattern describes how to open a related document (or card) page from a list page, for the case when there can be more than one pages associated to the rows of the list page.
Description The example below illustrates the connection of a List Page with multiple Document Pages, while the second example links the List Page with Card Pages.</description></item><item><title>multilanguage-application-data.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/multilanguage-application-data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/multilanguage-application-data/</guid><description>by Bogdana Botez at Microsoft Development Center Copenhagen
Abstract Generally, NAV translation refers to the translation of UI elements like captions and user texts (messages on dialogs, warnings, error messages). This translation is done by the Microsoft Dynamics NAV team before releasing the localized version of the product.
But there is one more scenario. In this scenario, Cronus International Ltd., wants to sell a &amp;ldquo;Fiets&amp;rdquo; to a Dutch customer, a&amp;quot;Cykel&amp;quot; to a Danish one, and a &amp;ldquo;Bicicletta&amp;rdquo; to an Italian customer.</description></item><item><title>named-invocations.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/named-invocations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/named-invocations/</guid><description>When calling an object statically use the name, not the number Bad code
PAGE.RUNMODAL(525,SalesShptLine) Good code
PAGE.RUNMODAL(PAGE::&amp;quot;Posted Sales Shipment Lines&amp;quot;,SalesShptLine)</description></item><item><title>nav-upgrade.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/nav-upgrade/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/nav-upgrade/</guid><description>Anti-Patterns in NAV Upgrade By Carlos Raul Garcia and Bogdana Botez at Microsoft Development Center Copenhagen
__
Context: when NAV is upgraded, whether on-premises or in the cloud, developers have the chance to write upgrade code to move data across changing data structures. Writing good quality code will help successful upgrades.
General on upgrade **Problem: **assuming that the upgrade table contains data.
If the table is empty, it means that either the upgrade has run, or there was no data in the original tenant; in both cases, the upgrade code should exit immediately.</description></item><item><title>nested-withs.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/nested-withs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/nested-withs/</guid><description>Do not nest WITHs that reference different types of objects. Bad code
WITH PostedWhseShptLine DO BEGIN ... WITH ItemLedgEntry DO InsertBufferRec(...,&amp;quot;Serial No.&amp;quot;,&amp;quot;Lot No.&amp;quot;,...); ... END; Good code
WITH PostedWhseShptLine DO BEGIN ... InsertBufferRec(...,ItemLedgEntry.&amp;quot;Serial No.&amp;quot;,ItemLedgEntry.&amp;quot;Lot No.&amp;quot;,...); ... END;</description></item><item><title>net-exception-handling-in-cal.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/net-exception-handling-in-cal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/net-exception-handling-in-cal/</guid><description>by Mostafa Balat, Microsoft Development Center Copenhagen
Abstract When there is a need to use .NET classes within C/AL, one of the main challenges is to handle the exceptions the methods of these .NET classes may throw. Eventually, if not handled, they will basically bubble up as runtime errors, halting the current operation a user is doing without having a chance to properly display errors in a user-friendly format.
Description Using the .</description></item><item><title>no-series.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/no-series/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/no-series/</guid><description>By Bogdana Botez, at Microsoft Development Center Copenhagen
Abstract Number series assignment is widely used in Microsoft Dynamics NAV to automatically assign unique numbers to data entries.
Description Documents and entities of any type (invoices, orders, customers, inventory items etc) are usually assigned an unique number, which can be later referenced whenever that particular entry needs to be consulted. When a new data entry is created, NAV implements the possibility to auto-assign a new number for this entry.</description></item><item><title>notification-lifecycle-management-pattern.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/notification-lifecycle-management-pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/notification-lifecycle-management-pattern/</guid><description>Notification Lifecycle Management pattern
_ By David Bastide at Microsoft Development Center Copenhagen _
 
 Context
This pattern is about sending notifications in Dynamics NAV, starting with version 2018, tracking them in the Notification Lifecycle Management framework, and recalling them when needed.
 Description
Notifications are easy to use in a wide range of cases. Instead of using notifications in a fire-and-forget way, we need to track them so that we can recall them if we need to.</description></item><item><title>notifications.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/notifications/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/notifications/</guid><description>A collection of patterns about notifications.</description></item><item><title>observer.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/observer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/observer/</guid><description>By Nikolai L&amp;rsquo;Estrange, from TVision Technology Ltd. in the UK_ _
Abstract Track all record changes against a defined table or set of tables.
Problem Microsoft Dynamics NAV has the built in ability to track all record changes against any table, however it does not always fire the triggers for every table.
Solution Create a setup table to define which other tables you want to track changes for, and optionally what triggers you want to fire, then link this up to the standard triggers in Codeunit 1.</description></item><item><title>one-statement-per-line.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/one-statement-per-line/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/one-statement-per-line/</guid><description>A line of code should not have more than one statement. Bad code
IF OppEntry.FIND('-') THEN EXIT Good code
IF OppEntry.FIND('-') THEN EXIT Bad code
TotalCost += Cost; TotalAmt += Amt; Good code
TotalCost += Cost; TotalAmt += Amt;</description></item><item><title>parameter-placeholders.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/parameter-placeholders/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/parameter-placeholders/</guid><description>The number of parameters passed to a string must match the placeholders.
Bad code
CannotDeleteLineErr@1005 : TextConst 'ENU=You cannot delete this line because one or more rating values exists.'; ... ERROR(CannotDeleteLineErr,TABLECAPTION); Good code
CannotDeleteLineErr@1005 : TextConst 'ENU=You cannot delete this line because one or more rating values exists.'; ... ERROR(CannotDeleteLineErr); Bad code
CannotUseThisFieldErr@1020 : TextConst 'ENU=You cannot use this field for %2 fields.'; ... ERROR(CannotUseThisFieldErr,0,Field.Class); Good code</description></item><item><title>patterns-authors.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/patterns-authors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/patterns-authors/</guid><description>This is the list of people that have been part of the NAV Design Patterns team. If you would like to join the project follow the instructions provided on Be a NAV Pattern Author page.
Project administrator: Bogdana Botez.
Authors (in alphabetical order):
Abshishek Ghosh, Microsoft (4 patterns)
Using Query Objects to Detect Duplicates Blocked Entity Single-Record (Setup) Table Temporary Dataset Report Anders Larsen, Microsoft (1 pattern)</description></item><item><title>posting-routine-select-behavior.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/posting-routine-select-behavior/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/posting-routine-select-behavior/</guid><description>By waldo
Abstract Send information (parameters) to a processing framework/routine so that it knows what to do, how to behave.
Description For a processing routine to behave correctly, it needs sometimes input of a user to know what it has to do, check or avoid doing. To do this, usually a piece of UI is getting called (STRMENU) with the question what to do. These input needs to get to the routine.</description></item><item><title>product-name.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/product-name/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/product-name/</guid><description>Abstract On many occasions, it&amp;rsquo;s needed to refer to the product name in messages or errors. It&amp;rsquo;s not a good practice to hardcode the brand name like Dynamics NAV 2017, and change this value with each rebranding. You can use client ProductName System Object instead to refer to the product name.
Problem When you want to refer to product name in informational messages or errors, it&amp;rsquo;s not a good practice to hardcode the brand name, as this requires changing this text when a rebranding happens.</description></item><item><title>queries.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/queries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/queries/</guid><description>Expand to see NAV design patterns which use queries.</description></item><item><title>read-once-initialization-and-validation.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/read-once-initialization-and-validation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/read-once-initialization-and-validation/</guid><description>_By Tim Grant**
**_
Abstract One time query and validation of a setup table.
Description Firstly identifies if a setup table record is in memory, removing the need to execute and validate the re-query again within a code unit. (From NAV 2013+ service tier database caching exists).
If you need to query a setup table, but not sure if the table is yet in memory from earlier code, this helps to determine this call (see Singleton Table pattern).</description></item><item><title>readability.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/readability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/readability/</guid><description>C/AL Coding Guidelines Readability Generally, all readability rules are Microsoft style choices only. You can use them to keep consistency with the existing code.
Find the C/AL guidelines by expanding the menu in the left.</description></item><item><title>related-links.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/related-links/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/related-links/</guid><description>Find below some related NAV Design Patterns links.
MSDN NAV Team Blog - posts about patterns
NAV Application Design slides from NAV TechDays conference in Antwerp, 2013
NAV Application Design movie from NAV TechDays conference in Antwerp, 2013
NAV&amp;rsquo;s Secret Code: Design Patterns of Today and Tomorrow slides from NAV TechDays conference in Antwerp, 2013</description></item><item><title>released-entity.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/released-entity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/released-entity/</guid><description>Authors: Henrik Langbak and Kim Ginnerup, Bording Data
Abstract This pattern prevent data from being used elsewhere before it is in a system consistent state.
NAV inserts a record as soon as the primary key has been set. But the record may not be in a valid state at this point in time. How do you know if a newly inserted record is ready for use?
Description Whenever you need to stall the release of data, you can use this pattern.</description></item><item><title>report-selection.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/report-selection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/report-selection/</guid><description>From the PRS workshop at NAVTechDays 2013, this pattern was written by 2 work groups
Group 1: Dale Gauci &amp;amp; Kimberly Congleton
Group 2: Jens Winberg, Tim Grant, Alen Tot
Thanks to Tim Grant who had merged the two patterns, corrected, sent for review and finalized them.
Meet the Pattern It should be possible to change which document report object should be used when printing. This configuration can be stored in one place (Report Selection) and available at configuration time.</description></item><item><title>reusable-bugs.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/reusable-bugs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/reusable-bugs/</guid><description>Reusable Bugs By Bogdana Botez, Andreas Moth, Eric Wauters, Elly Nkya, Nikola Kukrika
April 1st, 2015
Abstract It is difficult to come up with new and different bugs in each release, and it is a waste of resources to not use the ones which already had proven successful in the past. To avoid reinventing the wheel, we propose to come up with new innovative ways to create bugs that are reusable and generic enough to be used in various places of the application.</description></item><item><title>security.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/security/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/security/</guid><description>**Security patterns for NAV **
By Bogdana Botez at Microsoft Development Center Copenhagen
**** Problem statement When sensitive data is stored inside the Dynamics NAV database, if negligently handled, it can become vulnerable. Particularly, the location, access and the state of the data are critical.
Use the following patterns to enhance security on your NAV system.
Sensitive Data Encapsulation Data Encryption Single Point of Access Masked Text SSL in NAV</description></item><item><title>select-distinct-with-queries.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/select-distinct-with-queries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/select-distinct-with-queries/</guid><description>By Bogdana Botez, at Microsoft Development Center Copenhagen
Abstract This pattern explains how to perform SELECT DISTINCT by using queries in Dynamics NAV.
Description
When working with tables, sometimes a developer needs to perform a SELECT DISTINCT (also known as SELECT UNIQUE) from a table. As NAV does not provide this out of the box, we present below a way to select unique records by using queries.
Problem statement</description></item><item><title>separate-if-and-else.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/separate-if-and-else/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/separate-if-and-else/</guid><description>IF and ELSE statements should be on separate lines. Bad code
IF Atom\[i+1\] = '\&amp;gt;' THEN HasLogicalOperator := TRUE ELSE BEGIN ... END; Good code
IF Atom\[i+1\] = '\&amp;gt;' THEN HasLogicalOperator := TRUE ELSE BEGIN ... END;</description></item><item><title>setup-specificity-fallback.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/setup-specificity-fallback/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/setup-specificity-fallback/</guid><description>By Jan Hoek at IDYN
Abstract The Setup Specificity Fallback pattern allows users to efficiently define a potentially complex setup in terms of rules and exceptions to these rules, exceptions to the exceptions, etc.
**Description **
The pattern involves a setup table with a compound (i.e. consisting of more than one field) primary key, where each record in the table maps a combination of primary key values to a particular setup value.</description></item><item><title>setup-table.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/setup-table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/setup-table/</guid><description>Setup Table By Abhishek Ghosh, at Microsoft Development Center Copenhagen
This is the first and most well-known of the two usual applications of the Singleton Table pattern in Dynamics NAV.
Problem: the developer needs to store information about the operating setup or environment in the database, in a way that can be persisted across sessions.
Solution: The information is stored in a table with one record only. The user is subsequently able to modify, but not add or delete records in the table.</description></item><item><title>silent-file-upload-and-download.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/silent-file-upload-and-download/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/silent-file-upload-and-download/</guid><description>By Bogdana Botez, at Microsoft Development Center Copenhagen
Abstract This pattern is about silently handing file transfers between NAV Service Tier and the NAV client. By &amp;ldquo;silently&amp;rdquo; we mean: without showing a dialog box at upload or download time.
Description As a terminology clarification [1], note that both &amp;ldquo;upload&amp;rdquo; and &amp;ldquo;download&amp;rdquo; are named as seen from the client&amp;rsquo;s point of view:
Download&amp;quot; defines transferring a file from the server to the client.</description></item><item><title>singleton.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/singleton/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/singleton/</guid><description>Singleton By Bogdana Botez at Microsoft Development Center Copenhagen
**Context: The pattern described in this article applies to Dynamics NAV only. For the general definition of the Singleton pattern, see for example this link.
**
Problem: As a C/AL developer, you need to coordinate action (through a codeunit) or store information (in a table) that is unique across the system.
Forces:
Lost reference to centralizer: An instance of a relevant object could attempt to centralize control or data in the system.</description></item><item><title>singleton-codeunit.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/singleton-codeunit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/singleton-codeunit/</guid><description>Singleton Codeunit _By Bogdana Botez at Microsoft Development Center Copenhagen
_
_
_
Problem: In some situations, global state needs to be preserved at runtime throughout a session.
There are functionality areas in NAV where centralized application management code is needed, like for example managing permissions, notifications, the debugger etc. State needs to be preserved across calls to the management codeunit.
For example:
The debugger needs to remember the session which is being debugged The permission manager has a testability function, where it can be set to emulate that it&amp;rsquo;s running as a SaaS (Software As A Service &amp;ndash; the cloud) platform, even when the tests run in a &amp;ldquo;on-premise&amp;rdquo; local lab.</description></item><item><title>singleton-table.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/singleton-table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/singleton-table/</guid><description>Singleton Table By Elly Nkya at Microsoft Development Center Copenhagen
_
_
Problem: The developer needs to define a single record that can contain a set of rules and behavior (optional, mandatory, or defaulting mechanisms), that apply to a functionality, and can be configured by a user.
Forces
You want a central place to define the address and logo of your company (see Company Information table). You want to define the no.</description></item><item><title>spacing-binary-operators.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/spacing-binary-operators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/spacing-binary-operators/</guid><description>There must be exactly one space character on each side of a binary operator such as = + - AND OR =. The parameter comma operator however, should have no spaces. Bad code
&amp;quot;Line Discount %&amp;quot; := &amp;quot;Line Discount Amount&amp;quot;/&amp;quot;Line Value&amp;quot;\*100 Good code
&amp;quot;Line Discount %&amp;quot; := &amp;quot;Line Discount Amount&amp;quot; / &amp;quot;Line Value&amp;quot; \* 100; Bad code
StartDate := CALCDATE('&amp;lt;+'+FORMAT(Days + i)+'D\&amp;gt;', StartDate); Good code
StartDate := CALCDATE('&amp;lt;+' + FORMAT(Days + i) + 'D\&amp;gt;',StartDate); Bad code</description></item><item><title>spacing-brackets-and.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/spacing-brackets-and/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/spacing-brackets-and/</guid><description>There must be no spaces characters before and after [] dimension brackets symbols or :: option symbols. Bad code
A\[i\] \[j\] := Amt; Good code
A\[i\]\[j\] := Amt; Bad code
&amp;quot;Currency Exchange Rate&amp;quot;.&amp;quot;Fix Exchange Rate Amount&amp;quot; :: Currency: Good code
&amp;quot;Currency Exchange Rate&amp;quot;.&amp;quot;Fix Exchange Rate Amount&amp;quot;::Currency: Bad code
IF FIND (Which) THEN Good code
IF FIND(Which) THEN</description></item><item><title>spacing-unary-operators.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/spacing-unary-operators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/spacing-unary-operators/</guid><description>There must be no space between a unary operator and its argument (except for the NOT keyword). Bad code
IF NOT(Type = Type::Item) THEN Good code
IF NOT (Type = Type::Item) THEN Bad code
DiscAmt := - &amp;quot;Discount Amount&amp;quot;; Good code
DiscAmt := -&amp;quot;Discount Amount&amp;quot;;</description></item><item><title>standard-journal.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/standard-journal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/standard-journal/</guid><description>By Bogdana Botez, at Microsoft Development Center Copenhagen
Meet the Standard Journal pattern, which gives the NAV user the advantage of storing transaction details and reusing them multiple times at later dates. For example, this is how to pay a monthly bill.
Abstract If the journal data can be reused later, the user has the possibility to save the current temporary transaction details. One example can be the case of monthly electricity payments.</description></item><item><title>static-object-invocation.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/static-object-invocation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/static-object-invocation/</guid><description>Call objects statically whenever possible. It reduces extra noise and removes extra variables. Downside: changing the name of the object which is called statically will need a code update.
Bad code
LOCAL PROCEDURE Code@1(); VAR CAJnlPostBatch@1001 : Codeunit 1103; BEGIN CAJnlPostBatch.Run(CostJnlLine); END; Good code
LOCAL PROCEDURE Code@1(); BEGIN CODEUNIT.RUN(CODEUNIT::&amp;quot;CA Jnl.-Post Batch&amp;quot;,CostJnlLine); END;</description></item><item><title>suggested-abbreviations.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/suggested-abbreviations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/suggested-abbreviations/</guid><description>Suggested Abbreviations Whenever possible, do not use abbreviations in variables, functions and objects names.
If there is no other choice, then use the suggestions below.
Abbreviation
Text
Abs
absence
Acc
account
Acc
accounting
Accum
accumulated
Act
action
Activ
activity
Add
additional
Addr
address
Adj
adjust
Adjd
adjusted
Adjmt
adjustment
Agrmt
agreement
Alloc
allocation
Allow
allowance
Alt
alternative
Amt
amount
Amts
amounts
Ans
answer
Appl
applies
Appln
application
Arriv
arrival
Asm</description></item><item><title>template-for-writing-nav-design-patterns.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/template-for-writing-nav-design-patterns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/template-for-writing-nav-design-patterns/</guid><description>This is a guideline, some parts are optional (if there&amp;rsquo;s no content, remove the whole paragraph).
&amp;lt;Your name here in italics, plus your company name&amp;gt;
&amp;laquo;Pattern Title&amp;gt;&amp;gt; Short, descriptive and easy to remember.
Pattern Logo Black &amp;amp; white, no text on it.
Context: Sets the stage where the pattern takes place. 1-2 sentences.
Problem: What happens before this pattern is used? How can it go wrong? 1-5 lines.
Forces: (explain why the problem is difficult to solve; state the considerations that must be taken into account when choosing a solution to a problem)</description></item><item><title>temporary-dataset-report.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/temporary-dataset-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/temporary-dataset-report/</guid><description>by Abhishek Ghosh, at Microsoft Development Center Copenhagen
Abstract
This pattern generates the data to be displayed dynamically by combing/processing several data sources. It then displays the resulting dataset without writing to the database.
Description
While writing reports in NAV, we have the luxury of using a built-in iterator. So, once we define the dataitem and the ordering, the runtime takes care of the iteration.
The iterator has one shortcoming: It can only run through records written into the database.</description></item><item><title>temporary-variable-naming.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/temporary-variable-naming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/temporary-variable-naming/</guid><description>The name of a temporary variable must be prefixed with the word Temp and not otherwise. Bad code
JobWIPBuffer@1002 : TEMPORARY Record 1018; Good code
TempJobWIPBuffer@1002 : TEMPORARY Record 1018; Bad code
TempJobWIPBuffer@1002 : Record 1018; Good code
CopyOfJobWIPBuffer@1002 : Record 1018;</description></item><item><title>textconst-suffixes.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/textconst-suffixes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/textconst-suffixes/</guid><description>TextConst variable names should have a suffix (an approved three-letter suffix: Msg, Tok, Err, Qst, Lbl, Txt) describing usage. Bad code
CannotDeleteLine@1005 : TextConst 'ENU=You cannot delete this line because one or more rating values exists.'; ... ERROR(CannotDeleteLine,TABLECAPTION); Good code
CannotDeleteLineErr@1005 : TextConst 'ENU=You cannot delete this line because one or more rating values exists.'; ... ERROR(CannotDeleteLineErr,TABLECAPTION); Bad code
Text000@1011 : TextConst 'ENU=&amp;quot;has been changed (initial a %1: %2= %3, %4= %5)&amp;quot;'; .</description></item><item><title>totals-and-discounts-on-subpages-sales-and-purchases.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/totals-and-discounts-on-subpages-sales-and-purchases/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/totals-and-discounts-on-subpages-sales-and-purchases/</guid><description>By Nikola Kukrika at Microsoft Development Center Copenhagen
Abstract To increase discoverability and productivity, critical information, such as statistics, can be moved from separate pages onto the document where it is needed.
For example, documents should clearly display totals and discounts information to provide quick overview, make it easy to relate the amounts to the document currency, and to allow the user to see and apply discounts directly on the document.</description></item><item><title>transfer-custom-fields.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/transfer-custom-fields/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/transfer-custom-fields/</guid><description>watch?v=cGaBqwfGCws&amp;amp;list=PLhZ3P LY7CqmVszuvtJLujFyHpsVN0Uw&amp;amp;index=9</description></item><item><title>tryfunction-net-exception-handling-in-cal.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/tryfunction-net-exception-handling-in-cal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/tryfunction-net-exception-handling-in-cal/</guid><description>by Mostafa Balat, Microsoft Development Center Copenhagen
Abstract When there is a need to use .NET classes within C/AL, one of the main challenges is to handle the exceptions the methods of these .NET classes may throw. Eventually, if not handled, they will basically bubble up as runtime errors, halting the current operation a user is doing without having a chance to properly display errors in a user-friendly format.
Description Using the .</description></item><item><title>unary-operator-line-end.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/unary-operator-line-end/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/unary-operator-line-end/</guid><description>Do not end a line with unary operator. Bad code
&amp;quot;Quantity Handled (Base)&amp;quot; := - &amp;quot;Quantity Handled (Base)&amp;quot;); Good code
&amp;quot;Quantity Handled (Base)&amp;quot; := - &amp;quot;Quantity Handled (Base)&amp;quot;);</description></item><item><title>unnecessary-compound-parenthesis.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/unnecessary-compound-parenthesis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/unnecessary-compound-parenthesis/</guid><description>Use parenthesis only to enclose compound expressions inside compound expressions. Bad code
IF (&amp;quot;Costing Method&amp;quot; = &amp;quot;Costing Method&amp;quot;::Standard) THEN Good code
IF &amp;quot;Costing Method&amp;quot; = &amp;quot;Costing Method&amp;quot;::Standard THEN Bad code
ProfitPct = -(Profit) / CostAmt \* 100; Good code
ProfitPct = -Profit / CostAmt \* 100;</description></item><item><title>unnecessary-else.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/unnecessary-else/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/unnecessary-else/</guid><description>ELSE should not be used when the last action in the THEN part is an EXIT, BREAK, SKIP, QUIT, ERROR. Bad code
IF IsAdjmtBinCodeChanged THEN ERROR(AdjmtBinCodeChangeNotAllowedErr,...) ELSE ERROR(BinCodeChangeNotAllowedErr,...); Good code
IF IsAdjmtBinCodeChanged THEN ERROR(AdjmtBinCodeChangeNotAllowedErr,...) ERROR(BinCodeChangeNotAllowedErr,...);</description></item><item><title>unnecessary-function-parenthesis.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/unnecessary-function-parenthesis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/unnecessary-function-parenthesis/</guid><description>Do not use parenthesis in a function call if the function does not have any parameters. Bad code
IF ReservMgt.IsPositive() THEN Good code
IF ReservMgt.IsPositive THEN Bad code
IF ChangeStatusForm.RUNMODAL() &amp;lt;\&amp;gt; ACTION::Yes THEN Good code
IF ChangeStatusForm.RUNMODAL &amp;lt;\&amp;gt; ACTION::Yes THEN</description></item><item><title>unnecessary-separators.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/unnecessary-separators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/unnecessary-separators/</guid><description>There should be no unnecessary separators. Bad code
IF Customer.FINDFIRST THEN;; Good code
IF Customer.FINDFIRST THEN;</description></item><item><title>unnecessary-truefalse.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/unnecessary-truefalse/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/unnecessary-truefalse/</guid><description>Do not use TRUE or FALSE keywords unnecessarily if the expression is already an logical expression. Bad code
IF IsPositive() = TRUE THEN Good code
IF IsPositive THEN Bad code
IF Complete &amp;lt;\&amp;gt; TRUE THEN Good code
IF NOT Complete THEN</description></item><item><title>unreachable-code.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/unreachable-code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/unreachable-code/</guid><description>Do not write code that will never be hit.
It affects code readability and can lead to wrong assumptions.
Bad code
IF Type &amp;lt;\&amp;gt; Type::FIELD THEN BEGIN ... ERROR(...); RecRef.CLOSE; END; Good code
IF Type &amp;lt;\&amp;gt; Type::FIELD THEN BEGIN ... RecRef.CLOSE; ERROR(...); END;</description></item><item><title>unused-initialized-variables.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/unused-initialized-variables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/unused-initialized-variables/</guid><description>The value assigned to a variable must be used. Else the variable is not necessary.
Bad code
PROCEDURE AddEntities@1(FilterStr@1000 : Text\[250\]); VAR Vendor@1001 : Record 23; Count@1002 : Integer; BEGIN Count := 0; Vendor.SETFILTER(&amp;quot;No.&amp;quot;,FilterStr); IF Vendor.FINDSET THEN REPEAT &amp;quot;User ID&amp;quot; := USERID; &amp;quot;Vendor No.&amp;quot; := Vendor.&amp;quot;No.&amp;quot;; IF INSERT THEN Count += 1; UNTIL Vendor.NEXT = 0; END; Good code
PROCEDURE AddEntities@1(FilterStr@1000 : Text\[250\]); VAR Vendor@1001 : Record 23; BEGIN Vendor.</description></item><item><title>unused-variables.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/unused-variables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/unused-variables/</guid><description>Do not declare variables that are unused.
Unused variables affect readability.
Bad code
PROCEDURE CheckPostingDate@23(CaptionEntryNo@1005 : Text\[50\]); BEGIN IF GenJnlCheckLine.DateNotAllowed(PostingDate) THEN ERROR(DateNotAllowedErr,Caption,EntryNo) IF PostingDate \&amp;gt; MaxPostingDate THEN MaxPostingDate := PostingDate; END Good code
PROCEDURE CheckPostingDate@23(); BEGIN IF GenJnlCheckLine.DateNotAllowed(PostingDate) THEN ERROR(DateNotAllowedErr,Caption,EntryNo); IF PostingDate \&amp;gt; MaxPostingDate THEN MaxPostingDate := PostingDate; END; Bad code
PROCEDURE IsReturned@14(EntryNo@1002 : Integer) : Decimal; VAR ItemEntry@1000 : Record 32; Quantity@1003 : Integer; BEGIN EXIT(-OutboundApplied(EntryNo,TRUE) - InboundApplied(EntryNo,TRUE)); END; Good code</description></item><item><title>use-queries-to-detect-duplicate-records.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/use-queries-to-detect-duplicate-records/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/use-queries-to-detect-duplicate-records/</guid><description>_by Abshishek Ghosh and Bogdan Sturzoiu at Microsoft Development Center Copenhagen**
**_
Abstract This pattern uses queries to create an efficient way to detect duplicate entries in a table. This is, for example, useful when trying to find out which customers or contacts have the same names, so we can merge them later.
Description Duplicate detection has several requirements in Microsoft Dynamics NAV. One method to eliminate duplication is by defining the relevant field as the primary key.</description></item><item><title>use-queries-to-replace-nested-loops.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/use-queries-to-replace-nested-loops/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/use-queries-to-replace-nested-loops/</guid><description>by Bogdan Sturzoiu, Microsoft Development Center Copenhagen Abstract This pattern shows how the new query object type introduced in NAV 2013 allows you to replace costly loops when inspecting data from two or more tables.
Description One of the core operations in a relational database is joining two or more tables. For example, you might need to extract all sales lines in the database together with information regarding the related sales header.</description></item><item><title>use-text-constants.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/use-text-constants/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/use-text-constants/</guid><description>Pass user messages using Text Constants. It makes translation easy.
Bad code
ImportAttachmentQst@1021 : TextConst 'ENU=&amp;quot;Import attachment &amp;quot;'; ... IF CONFIRM(ImportAttachmentQst + Caption +'?',TRUE) THEN BEGIN Good code
ImportAttachmentQst@1021 : TextConst 'ENU=&amp;quot;Import attachment %1?&amp;quot;'; ... IF CONFIRM(STRSUBSTNO(ImportAttachmentQst, Caption),TRUE) THEN BEGIN Bad code
... IF NOT CONFIRM( STRSUBSTNO( 'Difference on Periodic entries: %1 on %2' + 'Do you want to continue?',Balance,Date), TRUE) THEN ERROR('Program terminated by the user'); Good code</description></item><item><title>using-calcdate.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/using-calcdate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/using-calcdate/</guid><description>CALCDATE should only be used with DateFormula variables. Alternatively the string should be enclosed using the &amp;lt;&amp;gt; symbols. Bad code
IF ReservEntry.&amp;quot;Expected Receipt Date&amp;quot; \&amp;gt; CALCDATE('-' + FORMAT(&amp;quot;Dampener (Time)&amp;quot;) + FirstDate) THEN Good code
IF ReservEntry.&amp;quot;Expected Receipt Date&amp;quot; \&amp;gt; CALCDATE('&amp;lt;-' + FORMAT(&amp;quot;Dampener (Time)&amp;quot;) + FirstDate + '\&amp;gt;') THEN</description></item><item><title>using-optioncaptionml.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/using-optioncaptionml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/using-optioncaptionml/</guid><description>The OptionCaptionML should be filled in for sourceexpression using option data types.
Bad code
{ 30 ;TextBox ;17850;0 ;150 ;423 ;Name=Selection; SourceExpr=Selection; DataSetFieldName=Selection } ... Selection@1008 : 'Open,Closed,Open and Closed'; ... Good code
{ 30 ;TextBox ;17850;0 ;150 ;423 ;Name=Selection; OptionCaptionML=ENU=Open,Closed,Open and Closed; SourceExpr=Selection; DataSetFieldName=Selection } ... Selection@1008 : 'Open,Closed,Open and Closed';</description></item><item><title>ux.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/ux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/ux/</guid><description>C/AL Coding Guidelines User eXperience Find the C/AL guidelines by expanding the menu in the left.</description></item><item><title>variable-already-scoped.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/variable-already-scoped/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/variable-already-scoped/</guid><description>Do not use scope &amp;lsquo;&amp;rsquo;.'' qualifier unnecessarily when a variable is already implicitly or explicitly scoped. It keeps the code simpler. Bad code
ReturnRcptHeader.SETRANGE(ReturnRcptHeader.&amp;quot;Return Order No.&amp;quot;,&amp;quot;Document No.&amp;quot;); Good code
ReturnRcptHeader.SETRANGE(&amp;quot;Return Order No.&amp;quot;,&amp;quot;Document No.&amp;quot;); Bad code
WITH ChangeLogSetupTable DO BEGIN ... IF ChangeLogSetupTable.DELETE THEN ... END; Good code
WITH ChangeLogSetupTable DO BEGIN ... IF DELETE THEN ... END;</description></item><item><title>variable-capacity-mismatch.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/variable-capacity-mismatch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/variable-capacity-mismatch/</guid><description>Do not assign a value to a variable whose capacity is smaller.
It will throw an error at runtime.
Bad code
FileName@1010 : Text\[250\]; ... UploadedFileName@1016 : Text\[1024\]; ... FileName := UploadedFileName; Good code
FileName@1010 : Text\[1024\]; ... UploadedFileName@1016 : Text\[1024\]; ... FileName := UploadedFileName; Bad code
FileName@1010 : Text\[250\]; ... UploadedFileName@1016 : Text\[1024\]; ... FileName := UploadedFileName; Good code
FileName@1010 : Text\[250\]; ... UploadedFileName@1016 : Text\[1024\]; .</description></item><item><title>variable-naming.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/variable-naming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/variable-naming/</guid><description>Variables that refer to a C/AL object must contain the objects name, abbreviated where necessary.
A variable must begin with a capital letter.
Blanks, periods, and other characters (such as parentheses) that would make quotation marks around a variable necessary must be omitted.
If a variable is a compound of two or more words or abbreviations, each word or abbreviation should begin with a capital letter. Bad code
... WIPBuffer@1002 : Record 1018 .</description></item><item><title>variables-declarations-order.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/variables-declarations-order/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/variables-declarations-order/</guid><description>Variables declarations should be ordered by type. In general, object and complex variable types are listed first followed by simple variables. The order should be the same as the object list in the object designer for C/AL objects. Afterwards come the complex variables like RecordRef, .NET, FieldRef etc. At the end come all the simple data types in no particular order. Bad code
StartingDateFilter@1002 : Text\[30\]; Vend@1003 : Record 23; Good code</description></item><item><title>variant-facade.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/variant-facade/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/variant-facade/</guid><description>Variant Façade By Nikola Kukrika, Waldo and Gary Winter
Abstract The Variant façade provides a single interface that can take any Record, RecordRef or RecordID as an argument. With this pattern the code is encapsulated within the single object, with clear separation between common and table specific code.
Problem Since NAV is strongly typed, developers often need to duplicate functionality in order to add support for a new table.</description></item><item><title>with-scope-name-collision.md</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/with-scope-name-collision/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/with-scope-name-collision/</guid><description>Do not use the WITH scope when it has a variable whose name is the same as a local variable. This can lead to wrong code assumptions.
**Given that **&amp;ldquo;Contract Type&amp;rdquo; is a field on table ServiceContractHeader, then in the following example there is a parameter name clash with the field name. Which one will be used?
Bad code
PROCEDURE InsertData@1(&amp;quot;Contract Type&amp;quot;@1000 : Option...); ... BEGIN ... WITH ServiceContractHeader DO BEGIN .</description></item></channel></rss>