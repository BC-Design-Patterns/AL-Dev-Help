<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2. Anti-Patterns on BC AL Help</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/2-anti-patterns/</link><description>Recent content in 2. Anti-Patterns on BC AL Help</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/2-anti-patterns/index.xml" rel="self" type="application/rss+xml"/><item><title>Nav Upgrade</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/2-anti-patterns/nav-upgrade/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/2-anti-patterns/nav-upgrade/</guid><description>Anti-Patterns in NAV Upgrade By Carlos Raul Garcia and Bogdana Botez at Microsoft Development Center Copenhagen
__
Context: when NAV is upgraded, whether on-premises or in the cloud, developers have the chance to write upgrade code to move data across changing data structures. Writing good quality code will help successful upgrades.
General on upgrade **Problem: **assuming that the upgrade table contains data.
If the table is empty, it means that either the upgrade has run, or there was no data in the original tenant; in both cases, the upgrade code should exit immediately.</description></item><item><title>Reusable Bugs</title><link>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/2-anti-patterns/reusable-bugs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bc-design-patterns.github.io/AL-Dev-Help/navpatterns/2-anti-patterns/reusable-bugs/</guid><description>Reusable Bugs By Bogdana Botez, Andreas Moth, Eric Wauters, Elly Nkya, Nikola Kukrika
April 1st, 2015
Abstract It is difficult to come up with new and different bugs in each release, and it is a waste of resources to not use the ones which already had proven successful in the past. To avoid reinventing the wheel, we propose to come up with new innovative ways to create bugs that are reusable and generic enough to be used in various places of the application.</description></item></channel></rss>